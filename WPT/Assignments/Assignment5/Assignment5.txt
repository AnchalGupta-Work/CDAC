Q1

const { rejects } = require("assert");
const { promises, resolve } = require("dns");

console.log("Program Started");

const mypromiss = new Promise((resolve,rejects) => {

  setTimeout(()=>{
    resolve("Program completed");
  },3000)
});


console.log("Program in progress...");

mypromiss.then((value)=>{
  console.log(value);
})











Q2.

console.log("Program Started");

let mypromiss = new Promise((resolve, reject)=>{
  setTimeout(()=>{
    resolve("Program Completed");
  },3000)

  setTimeout(()=>{
    reject("Program Failed");
  },2000)
})

console.log(mypromiss);
console.log("Program Loading");

mypromiss.then((res)=>{
  console.log(res);
}).catch((err)=>{
  console.log(err);
});




Q3.

console.log("Program Started");

let mypromiss = new Promise((resolve, reject)=>{
  setTimeout(()=>{
    resolve("Step one completed");
  },3000)


})

console.log(mypromiss);
console.log("Program Progressing");

mypromiss.then((res)=>{
  console.log(res);

  return new Promise((resolve,reject)=>{
    setTimeout(()=>{
      resolve("Step two completed");
    },3000)

  })
}).then((res)=>{
  console.log(res);
});



Q4.

console.log("Program Started");

let mypromiss = new Promise((resolve, rejects) =>{

setTimeout(()=>{
  resolve({data : "hello world",error : null})
},5000)


})

console.log(mypromiss);
console.log("Program in progress");

mypromiss.then((value)=>{
  console.log(value);

  return new Promise((resolve,rejects)=>{
    setTimeout(()=>{
      resolve("first promise chain completed");
    },2000)
  })
}).then((value)=>{
  console.log(value);

  return new Promise((resolve,rejects)=>{
    setTimeout(()=>{
      resolve("second promise chain completed");
    },2000)
  })


}).then((value)=>{
  console.log(value);
})